heat_template_version: 2013-05-23

description: >
  A HOT template that holds a VM instance with an attached
  Cinder volume.  The VM does nothing, it is only created.
parameters:
  key_name:
    type: string
    default: admin
  flavor:
    type: string
    default: m1.large
  image:
    type: string
    default: win2008srv-enterprise-v1.4.1
  network:
    type: string
    default: public-net
  vol_size:
    type: number
    default: 40
  pool_id:
    type: string
  app_name:
    default: virtualcoupongateway
    type: string
  app_url:
    default: http://download.tcwyun.com/cloudwebapp/virtualcoupongateway.rar
    type: string
  app_port:
    default: 1001
    type: string
  app_root:
    default: C:\wwwroot
    type: string
  app_configname:
    default: _
    type: string
  app_configcontent:
    default: _
    type: string
  app_portal:
    default: service.ashx
    type: string
resources:
  instance:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : volume }, delete_on_termination : "false" }]
      flavor: { get_param: flavor }
      networks: [{network: {get_param: network} }]
      user_data:
        str_replace:
          template: |
            #ps1_sysnative
            Import-Module WebAdministration
            $ErrorActionPreference = 'Stop'
            #eventlog
            New-EventLog -LogName AppDeploylog -Source openstack_heat, JobDone, Remark
            function ExecRetry($command, $maxRetryCount = 10, $retryInterval=2)
            {
                $currErrorActionPreference = $ErrorActionPreference
                $ErrorActionPreference = "Continue"
                $retryCount = 0
                while ($true)
                {
                    try
                    {
                        & $command
                        break
                    }
                    catch [System.Exception]
                    {
                        $retryCount++
                        if ($retryCount -ge $maxRetryCount)
                        {
                            $ErrorActionPreference = $currErrorActionPreference
                            throw
                        }
                        else
                        {
                            Write-EventLog -LogName AppDeploylog -Source openstack_heat -EntryType Information -EventId 1 -Message $_.Exception
                            Start-Sleep $retryInterval
                        }
                    }
                }
                $ErrorActionPreference = $currErrorActionPreference
            }
            #set web root path
            ExecRetry {
              New-Item app_root -type directory
            }
            #place project
            ExecRetry {
              $projectdir = "$ENV:Temp\projectname.rar"
              $projecturl = "appurl"
              (new-object System.Net.WebClient).DownloadFile($projecturl, $projectdir)
              $zippath = "C:\Program Files\7-Zip\7z.exe"
              & $zippath x $projectdir -oapp_root -y -aos
              del $projectdir
            }
            #config set
            ExecRetry {
              if(!("app_configname" -eq "_"))
              {
                $configpath = "app_root\projectname\App_Data\TCConfig\app_configname"
                $replacecontent = Get-Content $configpath | % { $_.Replace("app_configcontent".split(",")[0], "app_configcontent".Split(",")[1]) }
                $replacecontent | Out-File $configpath
              }
            }
            #enable .netframework x64 iaspi&cgi
            ExecRetry {
              $frameworkPath = "$env:windir\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll"
              Set-WebConfiguration "/system.webServer/security/isapiCgiRestriction/add[@path='$frameworkPath']/@allowed" -value 'True' -PSPath:IIS:\
            }
            #new web item
            ExecRetry {
              New-Item iis:\Sites\projectname -bindings @{protocol="http";bindingInformation="*:appport:"} -physicalPath app_root
              New-Item iis:\AppPools\projectname
              Set-ItemProperty iis:\AppPools\projectname managedRuntimeVersion v4.0 
              Set-ItemProperty iis:\AppPools\projectname ManagedPipelineMode 1
              New-Item IIS:\Sites\projectname\projectname -type Application -physicalpath app_root\projectname
              Set-ItemProperty IIS:\Sites\projectname -name applicationPool -value projectname
              Set-ItemProperty IIS:\Sites\projectname\projectname -name applicationPool -value projectname
              Set-Location IIS:
              Start-WebSite -name "projectname"
            }
          params:
            projectname: { get_param: app_name }
            appurl: { get_param: app_url }
            appport: { get_param: app_port }
            app_configname: { get_param: app_configname }
            app_configcontent: { get_param: app_configcontent }
            app_root: { get_param: app_root }
  volume:
    type: OS::Cinder::Volume
    properties:
      image: { get_param: image }
      size: { get_param: vol_size }
  member:
    type: OS::Neutron::PoolMember
    properties:
      pool_id: {get_param: pool_id}
      address: {get_attr: [ instance, first_address]}
      protocol_port: { get_param: app_port }